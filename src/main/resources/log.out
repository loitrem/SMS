Logging Provider: org.jboss.logging.Log4jLoggerProvider
Located and parsed 1 persistence units; checking each
Checking persistence-unit [name=SMS, explicit-provider=org.hibernate.jpa.HibernatePersistenceProvider] against incoming persistence unit name [SMS]
Persistence-unit [SMS] requested PersistenceProvider [org.hibernate.jpa.HibernatePersistenceProvider]
PersistenceUnitInfo [
	name: SMS
	persistence provider classname: org.hibernate.jpa.HibernatePersistenceProvider
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/Erik/IdeaProjects/SMS/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		jpa.entitymodels.Student
		jpa.entitymodels.Course
		jpa.entitymodels.StudentCourses
		jpa.entitymodels.StudentCoursesID]
	Mapping files names []
	Properties [
		javax.persistence.lock.timeout: 100
		hibernate.use_sql_comments: false
		javax.persistence.jdbc.user: root
		hibernate.cache.use_query_cache: false
		hibernate.dialect: org.hibernate.dialect.MariaDB103Dialect
		hibernate.temp.use_jdbc_metadata_defaults: false
		javax.persistence.jdbc.url: jdbc:mariadb://localhost:3306/sms
		hibernate.cache.use_second_level_cache: false
		javax.persistence.query.timeout: 100
		javax.persistence.jdbc.driver: org.mariadb.jdbc.Driver
		hibernate.format_sql: true
		hibernate.generate_statistics: false
		hibernate.hbm2ddl.auto: update
		hibernate.show_sql: false
		current_session_context_class: thread
		javax.persistence.jdbc.password: root]
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
HHH000412: Hibernate ORM core version 5.4.30.Final
HHH000206: hibernate.properties not found
Overriding existing service binding [org.hibernate.secure.spi.JaccService]
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
Adding type registration boolean -> org.hibernate.type.BooleanType@345f69f3
Adding type registration boolean -> org.hibernate.type.BooleanType@345f69f3
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@345f69f3
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@51549490
Adding type registration true_false -> org.hibernate.type.TrueFalseType@432038ec
Adding type registration yes_no -> org.hibernate.type.YesNoType@181e731e
Adding type registration byte -> org.hibernate.type.ByteType@5ef5c734
Adding type registration byte -> org.hibernate.type.ByteType@5ef5c734
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@5ef5c734
Adding type registration character -> org.hibernate.type.CharacterType@5b367418
Adding type registration char -> org.hibernate.type.CharacterType@5b367418
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5b367418
Adding type registration short -> org.hibernate.type.ShortType@12d2ce03
Adding type registration short -> org.hibernate.type.ShortType@12d2ce03
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@12d2ce03
Adding type registration integer -> org.hibernate.type.IntegerType@39ac0c0a
Adding type registration int -> org.hibernate.type.IntegerType@39ac0c0a
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@39ac0c0a
Adding type registration long -> org.hibernate.type.LongType@327bcebd
Adding type registration long -> org.hibernate.type.LongType@327bcebd
Adding type registration java.lang.Long -> org.hibernate.type.LongType@327bcebd
Adding type registration float -> org.hibernate.type.FloatType@49c66ade
Adding type registration float -> org.hibernate.type.FloatType@49c66ade
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@49c66ade
Adding type registration double -> org.hibernate.type.DoubleType@4f3bbf68
Adding type registration double -> org.hibernate.type.DoubleType@4f3bbf68
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@4f3bbf68
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@59a008ba
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@59a008ba
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@b4711e2
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@b4711e2
Adding type registration string -> org.hibernate.type.StringType@5b6ec132
Adding type registration java.lang.String -> org.hibernate.type.StringType@5b6ec132
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@132e0cc
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@6cc558c6
Adding type registration url -> org.hibernate.type.UrlType@5c2375a9
Adding type registration java.net.URL -> org.hibernate.type.UrlType@5c2375a9
Adding type registration Duration -> org.hibernate.type.DurationType@558bdf1f
Adding type registration java.time.Duration -> org.hibernate.type.DurationType@558bdf1f
Adding type registration Instant -> org.hibernate.type.InstantType@56928307
Adding type registration java.time.Instant -> org.hibernate.type.InstantType@56928307
Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@66c92293
Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@66c92293
Adding type registration LocalDate -> org.hibernate.type.LocalDateType@1e097d59
Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@1e097d59
Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@77128536
Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@77128536
Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@5a755cc1
Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@5a755cc1
Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@2c07545f
Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@2c07545f
Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@29526c05
Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@29526c05
Adding type registration date -> org.hibernate.type.DateType@e70f13a
Adding type registration java.sql.Date -> org.hibernate.type.DateType@e70f13a
Adding type registration time -> org.hibernate.type.TimeType@466276d8
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@466276d8
Adding type registration timestamp -> org.hibernate.type.TimestampType@24ba9639
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@24ba9639
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@24ba9639
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1b84f475
Adding type registration calendar -> org.hibernate.type.CalendarType@6f63b475
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6f63b475
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6f63b475
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@b2c5e07
Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@336f1079
Adding type registration locale -> org.hibernate.type.LocaleType@6dab9b6d
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@6dab9b6d
Adding type registration currency -> org.hibernate.type.CurrencyType@6d025197
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6d025197
Adding type registration timezone -> org.hibernate.type.TimeZoneType@1b955cac
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1b955cac
Adding type registration class -> org.hibernate.type.ClassType@6eb2384f
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@6eb2384f
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@7e6ef134
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@7e6ef134
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1921ad94
Adding type registration binary -> org.hibernate.type.BinaryType@30af5b6b
Adding type registration byte[] -> org.hibernate.type.BinaryType@30af5b6b
Adding type registration [B -> org.hibernate.type.BinaryType@30af5b6b
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4f9a2c08
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4f9a2c08
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4f9a2c08
Adding type registration row_version -> org.hibernate.type.RowVersionType@22356acd
Adding type registration image -> org.hibernate.type.ImageType@3d1848cc
Adding type registration characters -> org.hibernate.type.CharArrayType@648c94da
Adding type registration char[] -> org.hibernate.type.CharArrayType@648c94da
Adding type registration [C -> org.hibernate.type.CharArrayType@648c94da
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@24111ef1
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@24111ef1
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@24111ef1
Adding type registration text -> org.hibernate.type.TextType@71812481
Adding type registration ntext -> org.hibernate.type.NTextType@47f9738
Adding type registration blob -> org.hibernate.type.BlobType@42bc14c1
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@42bc14c1
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@460ebd80
Adding type registration clob -> org.hibernate.type.ClobType@51acdf2e
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@51acdf2e
Adding type registration nclob -> org.hibernate.type.NClobType@403f0a22
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@403f0a22
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@5143c662
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@3e7dd664
Adding type registration serializable -> org.hibernate.type.SerializableType@74bada02
Adding type registration object -> org.hibernate.type.ObjectType@134d26af
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@134d26af
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@4b3ed2f0
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4fad9bb2
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@517d4a0d
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@7862f56
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@3a12c404
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1941a8ff
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@22d7b4f8
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@149dd36b
Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@16c63f5] into BootstrapContext; was [null]
Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@35229f85] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@6d3c5255]
Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
HHH000400: Using dialect: org.hibernate.dialect.MariaDB103Dialect
IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [MIXED]; that will likely lead to problems in schema update and validation if using quoted identifiers
HHH000422: Disabling contextual LOB creation as connection was null
Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@13e3c1c7] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@5316e95f]
Encountered a non-categorized annotated class [jpa.entitymodels.StudentCoursesID]; ignoring
Binding entity from annotated class: jpa.entitymodels.Student
Binding named query: Find all students => SELECT s FROM Student s
Binding named query: Find student by email => FROM Student s WHERE s.sEmail = :email
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name Student
Bind entity jpa.entitymodels.Student on table Student
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Student), mappingColumn=email, insertable=true, updatable=true, unique=false}
Not known whether passed class name [jpa.entitymodels.Student] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : jpa.entitymodels.Student
MetadataSourceProcessor property sEmail with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.Student:sEmail]
building SimpleValue for sEmail
Building property sEmail
#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(email)]), sEmail, assigned, , ...)
Binding column: Ejb3JoinColumn{logicalColumnName='student_email', referencedColumn='', mappedBy=''}
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Student), mappingColumn=sCourses, insertable=true, updatable=true, unique=false}
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Student), mappingColumn=null, insertable=true, updatable=true, unique=false}
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Student), mappingColumn=element, insertable=true, updatable=true, unique=false}
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Student), mappingColumn=sCourses_KEY, insertable=true, updatable=true, unique=false}
Binding column: Ejb3JoinColumn{logicalColumnName='sCourses_KEY', referencedColumn='null', mappedBy='null'}
Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
Collection role: jpa.entitymodels.Student.sCourses
Building property sCourses
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Student), mappingColumn=name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sName with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.Student:sName]
building SimpleValue for sName
Building property sName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Student), mappingColumn=password, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sPass with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.Student:sPass]
building SimpleValue for sPass
Building property sPass
Binding entity from annotated class: jpa.entitymodels.Course
Binding named query: Find course by id => SELECT c FROM Course c WHERE c.cId = :id
Binding named query: Find all courses => Select c from Course c
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name Course
Bind entity jpa.entitymodels.Course on table Course
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Course), mappingColumn=id, insertable=true, updatable=true, unique=false}
Not known whether passed class name [jpa.entitymodels.Course] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : jpa.entitymodels.Course
MetadataSourceProcessor property cId with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.Course:cId]
building SimpleValue for cId
Building property cId
#makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), cId, identity, , ...)
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Course), mappingColumn=instructor, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property cInstructorName with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.Course:cInstructorName]
building SimpleValue for cInstructorName
Building property cInstructorName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Course), mappingColumn=name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property cName with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.Course:cName]
building SimpleValue for cName
Building property cName
Binding entity from annotated class: jpa.entitymodels.StudentCourses
Binding named query: CoursesByStudent => SELECT c FROM StudentCourses c WHERE c.eMail = :email
Binding named query: Find all studentcourses => Select c from StudentCourses c
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name StudentCourses
Bind entity jpa.entitymodels.StudentCourses on table StudentCourses
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(StudentCourses), mappingColumn=course_id, insertable=true, updatable=true, unique=false}
Not known whether passed class name [jpa.entitymodels.StudentCourses] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : jpa.entitymodels.StudentCourses
MetadataSourceProcessor property courseID with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.StudentCourses.id:courseID]
building SimpleValue for courseID
Building property courseID
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(StudentCourses), mappingColumn=student_email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property eMail with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.StudentCourses.id:eMail]
building SimpleValue for eMail
Building property eMail
#makeIdGenerator(org.hibernate.mapping.Component([org.hibernate.mapping.Property(courseID), org.hibernate.mapping.Property(eMail)]), null, assigned, , ...)
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(StudentCourses), mappingColumn=course_id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property courseID with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.StudentCourses._identifierMapper:courseID]
building SimpleValue for courseID
Building property courseID
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(StudentCourses), mappingColumn=student_email, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property eMail with lazy=false
Attempting to locate auto-apply AttributeConverter for property [jpa.entitymodels.StudentCourses._identifierMapper:eMail]
building SimpleValue for eMail
Building property eMail
Starting fillSimpleValue for sEmail
Starting fillSimpleValue for sName
Starting fillSimpleValue for sPass
Starting fillSimpleValue for cId
Starting fillSimpleValue for cInstructorName
Starting fillSimpleValue for cName
Starting fillSimpleValue for courseID
Starting fillSimpleValue for eMail
Starting fillSimpleValue for courseID
Starting fillSimpleValue for eMail
Forcing column [email] to be non-null as it is part of the primary key for table [student]
Forcing column [id] to be non-null as it is part of the primary key for table [course]
Forcing column [course_id] to be non-null as it is part of the primary key for table [studentcourses]
Forcing column [student_email] to be non-null as it is part of the primary key for table [studentcourses]
Second pass for collection: jpa.entitymodels.Student.sCourses
Binding a OneToMany: jpa.entitymodels.Student.sCourses through a foreign key
Mapping collection: jpa.entitymodels.Student.sCourses -> StudentCourses
Mapped collection key: student_email, one-to-many: jpa.entitymodels.StudentCourses
Resolving reference to class: jpa.entitymodels.Student
Resolving reference to class: jpa.entitymodels.Student
Building session factory
SessionFactory name : null
Automatic flush during beforeCompletion(): enabled
Automatic session close at end of transaction: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : disabled
Using BatchFetchStyle : LEGACY
Default batch fetch size: -1
Maximum outer join fetch depth: 2
Default null ordering: NONE
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
multi-tenancy strategy : NONE
JTA Track by Thread: enabled
Query language substitutions: {}
Named query checking : enabled
Second-level cache: disabled
Second-level query cache: disabled
Second-level query cache factory: null
Second-level cache region prefix: null
Optimize second-level cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Automatic eviction of collection cache: disabled
JDBC batch size: 0
JDBC batch updates for versioned data: enabled
Scrollable result sets: disabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): disabled
JDBC result set fetch size: null
Connection release mode: AFTER_TRANSACTION
Generate SQL with comments: disabled
JPA compliance - query : disabled
JPA compliance - closed-handling : disabled
JPA compliance - lists : disabled
JPA compliance - transactions : disabled
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MariaDB103Dialect, java.class.path=C:\Users\Erik\IdeaProjects\SMS\target\classes;C:\Users\Erik\.m2\repository\org\projectlombok\lombok\1.18.20\lombok-1.18.20.jar;C:\Users\Erik\.m2\repository\org\mariadb\jdbc\mariadb-java-client\2.7.2\mariadb-java-client-2.7.2.jar;C:\Users\Erik\.m2\repository\org\hibernate\hibernate-core\5.4.30.Final\hibernate-core-5.4.30.Final.jar;C:\Users\Erik\.m2\repository\org\jboss\logging\jboss-logging\3.4.1.Final\jboss-logging-3.4.1.Final.jar;C:\Users\Erik\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\Erik\.m2\repository\org\javassist\javassist\3.27.0-GA\javassist-3.27.0-GA.jar;C:\Users\Erik\.m2\repository\net\bytebuddy\byte-buddy\1.10.21\byte-buddy-1.10.21.jar;C:\Users\Erik\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Erik\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\Erik\.m2\repository\org\jboss\jandex\2.2.3.Final\jandex-2.2.3.Final.jar;C:\Users\Erik\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Erik\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\Erik\.m2\repository\org\dom4j\dom4j\2.1.3\dom4j-2.1.3.jar;C:\Users\Erik\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\Erik\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\Erik\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\Erik\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\Erik\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\Erik\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\Erik\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\Erik\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.30.Final\hibernate-entitymanager-5.4.30.Final.jar;C:\Users\Erik\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Erik\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\Erik\.m2\repository\org\junit\platform\junit-platform-commons\1.8.0-M1\junit-platform-commons-1.8.0-M1.jar;C:\Users\Erik\.m2\repository\org\junit\platform\junit-platform-engine\1.8.0-M1\junit-platform-engine-1.8.0-M1.jar;C:\Users\Erik\.m2\repository\org\junit\platform\junit-platform-runner\1.8.0-M1\junit-platform-runner-1.8.0-M1.jar;C:\Users\Erik\.m2\repository\junit\junit\4.13.1\junit-4.13.1.jar;C:\Users\Erik\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Erik\.m2\repository\org\apiguardian\apiguardian-api\1.1.1\apiguardian-api-1.1.1.jar;C:\Users\Erik\.m2\repository\org\junit\platform\junit-platform-launcher\1.8.0-M1\junit-platform-launcher-1.8.0-M1.jar;C:\Users\Erik\.m2\repository\org\junit\platform\junit-platform-suite-api\1.8.0-M1\junit-platform-suite-api-1.8.0-M1.jar;C:\Users\Erik\.m2\repository\org\junit\platform\junit-platform-suite-commons\1.8.0-M1\junit-platform-suite-commons-1.8.0-M1.jar;C:\Users\Erik\.m2\repository\org\apache\maven\plugins\maven-surefire-plugin\3.0.0-M5\maven-surefire-plugin-3.0.0-M5.jar;C:\Users\Erik\.m2\repository\org\apache\maven\surefire\maven-surefire-common\3.0.0-M5\maven-surefire-common-3.0.0-M5.jar;C:\Users\Erik\.m2\repository\org\apache\maven\surefire\surefire-api\3.0.0-M5\surefire-api-3.0.0-M5.jar;C:\Users\Erik\.m2\repository\org\apache\maven\surefire\surefire-logger-api\3.0.0-M5\surefire-logger-api-3.0.0-M5.jar;C:\Users\Erik\.m2\repository\org\apache\maven\surefire\surefire-extensions-api\3.0.0-M5\surefire-extensions-api-3.0.0-M5.jar;C:\Users\Erik\.m2\repository\org\apache\maven\surefire\surefire-booter\3.0.0-M5\surefire-booter-3.0.0-M5.jar;C:\Users\Erik\.m2\repository\org\apache\maven\surefire\surefire-extensions-spi\3.0.0-M5\surefire-extensions-spi-3.0.0-M5.jar;C:\Users\Erik\.m2\repository\org\apache\maven\maven-toolchain\3.0-alpha-2\maven-toolchain-3.0-alpha-2.jar;C:\Users\Erik\.m2\repository\org\apache\maven\shared\maven-artifact-transfer\0.11.0\maven-artifact-transfer-0.11.0.jar;C:\Users\Erik\.m2\repository\org\apache\maven\shared\maven-common-artifact-filters\3.0.1\maven-common-artifact-filters-3.0.1.jar;C:\Users\Erik\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\Erik\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\Erik\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\Erik\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\Erik\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\Erik\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\Erik\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\Erik\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\Erik\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Erik\.m2\repository\org\codehaus\plexus\plexus-java\1.0.5\plexus-java-1.0.5.jar;C:\Users\Erik\.m2\repository\org\ow2\asm\asm\7.2\asm-7.2.jar;C:\Users\Erik\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M9\qdox-2.0-M9.jar;C:\Users\Erik\.m2\repository\org\apache\maven\surefire\surefire-shared-utils\3.0.0-M4\surefire-shared-utils-3.0.0-M4.jar, java.vm.vendor=Amazon.com Inc., sun.arch.data.model=64, user.variant=, java.vendor.url=https://aws.amazon.com/corretto/, user.timezone=, javax.persistence.jdbc.url=jdbc:mariadb://localhost:3306/sms, javax.persistence.jdbc.user=****, javax.persistence.query.timeout=100, os.name=Windows 10, java.vm.specification.version=11, hibernate.generate_statistics=false, current_session_context_class=thread, sun.java.launcher=SUN_STANDARD, user.country=US, local.setting.IS_JTA_TXN_COORD=false, sun.boot.library.path=C:\Users\Erik\.jdks\corretto-11.0.11\bin, sun.java.command=jpa.mainrunner.SMSRunner, javax.persistence.lock.timeout=100, hibernate.use_sql_comments=false, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\Erik, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2021-04-20, java.home=C:\Users\Erik\.jdks\corretto-11.0.11, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=org.mariadb.jdbc.Driver, hibernate.hbm2ddl.auto=update, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11.0.11+9-LTS, user.name=Erik, hibernate.cache.use_query_cache=false, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mariadb://localhost:3306/sms, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=SMS, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=false, java.vendor.version=Corretto-11.0.11.9.1, hibernate.connection.driver_class=org.mariadb.jdbc.Driver, java.vendor.url.bug=https://github.com/corretto/corretto-11/issues/, java.io.tmpdir=C:\Users\Erik\AppData\Local\Temp\, java.version=11.0.11, user.dir=C:\Users\Erik\IdeaProjects\SMS, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@faa3fed, hibernate.cache.use_second_level_cache=false, java.library.path=C:\Users\Erik\.jdks\corretto-11.0.11\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Oculus\Support\oculus-runtime;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\ProgramData\chocolatey\bin;D:\Program Files\chocolatey\bin;D:\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\ProgramData\DockerDesktop\version-bin;C:\Users\Erik\AppData\Local\Microsoft\WindowsApps;D:\Microsoft VS Code\bin;D:\Program Files\IntelliJ IDEA Community Edition 2020.3.3\bin;;., java.vendor=Amazon.com Inc., java.vm.info=mixed mode, hibernate.temp.use_jdbc_metadata_defaults=false, java.vm.version=11.0.11+9-LTS, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
Skipping JACC integration as it was not enabled
Instantiated session factory
Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@13e3c1c7] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@267bbe1a]
Not known whether passed class name [jpa.entitymodels.Student] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : jpa.entitymodels.Student
Not known whether passed class name [jpa.entitymodels.Course] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : jpa.entitymodels.Course
Not known whether passed class name [jpa.entitymodels.StudentCourses] is safe
No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : jpa.entitymodels.StudentCourses
Static SQL for collection: jpa.entitymodels.Student.sCourses
 Row insert: update StudentCourses set student_email=? where course_id=? and student_email=?
 Row update: update StudentCourses set  where course_id=? and student_email=?
 Row delete: update StudentCourses set student_email=null where student_email=? and course_id=?
 One-shot delete: update StudentCourses set student_email=null where student_email=?
Static SQL for entity: jpa.entitymodels.Student
 Version select: select email from Student where email =?
 Snapshot select: select student_.email, student_.name as name2_1_, student_.password as password3_1_ from Student student_ where student_.email=?
 Insert 0: insert into Student (name, password, email) values (?, ?, ?)
 Update 0: update Student set name=?, password=? where email=?
 Delete 0: delete from Student where email=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@255e5e2e]
Visiting attribute path : sCourses
Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5c60b0a0]
Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@8ee0c23]
Adding QuerySpace : uid = <gen:2>-id -> org.hibernate.loader.plan.build.internal.spaces.CompositeQuerySpaceImpl@2459319c]
Visiting attribute path : sName
Visiting attribute path : sPass
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=jpa.entitymodels.Student)
    - Returns
       - EntityReturnImpl(entity=jpa.entitymodels.Student, querySpaceUid=<gen:0>, path=jpa.entitymodels.Student)
          - CollectionAttributeFetchImpl(collection=jpa.entitymodels.Student.sCourses, querySpaceUid=<gen:1>, path=jpa.entitymodels.Student.sCourses)
             - (collection element) CollectionFetchableElementEntityGraph(entity=jpa.entitymodels.StudentCourses, querySpaceUid=<gen:2>, path=jpa.entitymodels.Student.sCourses.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=jpa.entitymodels.Student)
          - SQL table alias mapping - student0_
          - alias suffix - 0_
          - suffixed key columns - {email1_1_0_}

Static select for entity jpa.entitymodels.Student [NONE]: select student0_.email as email1_1_0_, student0_.name as name2_1_0_, student0_.password as password3_1_0_ from Student student0_ where student0_.email=?
Static SQL for entity: jpa.entitymodels.Course
 Version select: select id from Course where id =?
 Snapshot select: select course_.id, course_.instructor as instruct2_0_, course_.name as name3_0_ from Course course_ where course_.id=?
 Insert 0: insert into Course (instructor, name, id) values (?, ?, ?)
 Update 0: update Course set instructor=?, name=? where id=?
 Delete 0: delete from Course where id=?
 Identity insert: insert into Course (instructor, name) values (?, ?)
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@16eedaa6]
Visiting attribute path : cInstructorName
Visiting attribute path : cName
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=jpa.entitymodels.Course)
    - Returns
       - EntityReturnImpl(entity=jpa.entitymodels.Course, querySpaceUid=<gen:0>, path=jpa.entitymodels.Course)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=jpa.entitymodels.Course)
          - SQL table alias mapping - course0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

Static select for entity jpa.entitymodels.Course [NONE]: select course0_.id as id1_0_0_, course0_.instructor as instruct2_0_0_, course0_.name as name3_0_0_ from Course course0_ where course0_.id=?
Static SQL for entity: jpa.entitymodels.StudentCourses
 Version select: select course_id, student_email from StudentCourses where course_id =? and student_email =?
 Snapshot select: select studentcou_.course_id, studentcou_.student_email from StudentCourses studentcou_ where studentcou_.course_id=? and studentcou_.student_email=?
 Insert 0: insert into StudentCourses (course_id, student_email) values (?, ?)
 Update 0: null
 Delete 0: delete from StudentCourses where course_id=? and student_email=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b051a5c]
Adding QuerySpace : uid = <gen:0>-id -> org.hibernate.loader.plan.build.internal.spaces.CompositeQuerySpaceImpl@639aba11]
Visiting attribute path : courseID
Visiting attribute path : eMail
Visiting attribute path : 
Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CompositeQuerySpaceImpl@58496c97]
Visiting attribute path : courseID
Visiting attribute path : eMail
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(entity=jpa.entitymodels.StudentCourses)
    - Returns
       - EntityReturnImpl(entity=jpa.entitymodels.StudentCourses, querySpaceUid=<gen:0>, path=jpa.entitymodels.StudentCourses)
          - CompositeAttributeFetchImpl(composite=jpa.entitymodels.StudentCourses, querySpaceUid=<gen:1>, path=jpa.entitymodels.StudentCourses)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=jpa.entitymodels.StudentCourses)
          - SQL table alias mapping - studentcou0_
          - alias suffix - 0_
          - suffixed key columns - {course_i1_2_0_, student_2_2_0_}
          - JOIN (JoinDefinedByMetadata(id)) : <gen:0> -> <gen:0>-id
             - CompositeQuerySpaceImpl(uid=<gen:0>-id)
                - SQL table alias mapping - studentcou0_
          - JOIN (JoinDefinedByMetadata(_identifierMapper)) : <gen:0> -> <gen:1>
             - CompositeQuerySpaceImpl(uid=<gen:1>)
                - SQL table alias mapping - studentcou0_

Static select for entity jpa.entitymodels.StudentCourses [NONE]: select studentcou0_.course_id as course_i1_2_0_, studentcou0_.student_email as student_2_2_0_ from StudentCourses studentcou0_ where studentcou0_.course_id=? and studentcou0_.student_email=?
Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4c2fb9dd]
Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54f4a7f0]
Adding QuerySpace : uid = <gen:1>-id -> org.hibernate.loader.plan.build.internal.spaces.CompositeQuerySpaceImpl@61a1ea2c]
Visiting attribute path : courseID
Visiting attribute path : eMail
Visiting attribute path : 
Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CompositeQuerySpaceImpl@23eff5d1]
Visiting attribute path : courseID
Visiting attribute path : eMail
Building LoadPlan...
processing queryspace <gen:0>
LoadPlan(collection=jpa.entitymodels.Student.sCourses)
    - Returns
       - CollectionReturnImpl(collection=jpa.entitymodels.Student.sCourses, querySpaceUid=<gen:0>, path=[jpa.entitymodels.Student.sCourses])
          - (collection element) CollectionFetchableElementEntityGraph(entity=jpa.entitymodels.StudentCourses, querySpaceUid=<gen:1>, path=[jpa.entitymodels.Student.sCourses].<elements>)
             - CompositeAttributeFetchImpl(composite=jpa.entitymodels.StudentCourses, querySpaceUid=<gen:2>, path=[jpa.entitymodels.Student.sCourses].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=jpa.entitymodels.Student.sCourses)
          - SQL table alias mapping - scourses0_
          - alias suffix - 0_
          - suffixed key columns - {student_2_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - course_i1_2_1_, student_2_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=jpa.entitymodels.StudentCourses)
                - SQL table alias mapping - scourses0_
                - alias suffix - 1_
                - suffixed key columns - {course_i1_2_1_, student_2_2_1_}
                - JOIN (JoinDefinedByMetadata(id)) : <gen:1> -> <gen:1>-id
                   - CompositeQuerySpaceImpl(uid=<gen:1>-id)
                      - SQL table alias mapping - scourses0_
                - JOIN (JoinDefinedByMetadata(_identifierMapper)) : <gen:1> -> <gen:2>
                   - CompositeQuerySpaceImpl(uid=<gen:2>)
                      - SQL table alias mapping - scourses0_

Static select for collection jpa.entitymodels.Student.sCourses: select scourses0_.student_email as student_2_2_0_, scourses0_.course_id as course_i1_2_0_, scourses0_.course_id as course_i1_2_1_, scourses0_.student_email as student_2_2_1_ from StudentCourses scourses0_ where scourses0_.student_email=?
HHH10001002: Using Hibernate built-in connection pool (not for production use!)
HHH10001005: using driver [org.mariadb.jdbc.Driver] at URL [jdbc:mariadb://localhost:3306/sms]
HHH10001001: Connection properties: {password=root, user=root}
HHH10001003: Autocommit mode: false
Initializing Connection pool with 1 Connections
HHH000115: Hibernate connection pool size: 20 (min=1)
HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@43e9089] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
No alter strings for table : Course
No alter strings for table : Student
No alter strings for table : StudentCourses
No JtaPlatform was specified, checking resolver
No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Checking 6 named HQL queries
Checking named query: Find all courses
Statistics initialized [enabled=false]
QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@20b9d5d5
parse() - HQL: Select c from jpa.entitymodels.Course c
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[IDENT] Node: 'jpa'
       |     |  |  \-[IDENT] Node: 'entitymodels'
       |     |  \-[IDENT] Node: 'Course'
       |     \-[ALIAS] Node: 'c'
       \-[SELECT] Node: 'Select'
          \-[IDENT] Node: 'c'

select << begin [level=1, statement=select]
FromClause{level=1} : jpa.entitymodels.Course (c) -> course0_
Resolved : c -> course0_.id
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} course0_.id ) ( FromClause{level=1} Course course0_ ) )
Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Course): [Course]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(jpa.entitymodels.Course)
    |  | originalText: c
    |  \-SqlFragment
    \-FromClause
       \-FromElement

Using FROM fragment [Course course0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Course)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'course0_.id as id1_0_' {alias=c, className=jpa.entitymodels.Course, tableAlias=course0_}
    |  \-[SQL_TOKEN] SqlFragment: 'course0_.instructor as instruct2_0_, course0_.name as name3_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[course0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Course course0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=Course,tableAlias=course0_,origin=null,columns={,className=jpa.entitymodels.Course}}

throwQueryException() : no errors
HQL: Select c from jpa.entitymodels.Course c
SQL: select course0_.id as id1_0_, course0_.instructor as instruct2_0_, course0_.name as name3_0_ from Course course0_
throwQueryException() : no errors
Checking named query: Find all studentcourses
parse() - HQL: Select c from jpa.entitymodels.StudentCourses c
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[IDENT] Node: 'jpa'
       |     |  |  \-[IDENT] Node: 'entitymodels'
       |     |  \-[IDENT] Node: 'StudentCourses'
       |     \-[ALIAS] Node: 'c'
       \-[SELECT] Node: 'Select'
          \-[IDENT] Node: 'c'

select << begin [level=1, statement=select]
FromClause{level=1} : jpa.entitymodels.StudentCourses (c) -> studentcou0_
Resolved : c -> studentcou0_.course_id, studentcou0_.student_email
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} studentcou0_.course_id, studentcou0_.student_email ) ( FromClause{level=1} StudentCourses studentcou0_ ) )
Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity StudentCourses): [StudentCourses]
    |  \-IdentNode
    |    persister: SingleTableEntityPersister(jpa.entitymodels.StudentCourses)
    |    originalText: c
    \-FromClause
       \-FromElement

Using FROM fragment [StudentCourses studentcou0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (StudentCourses)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[ALIAS_REF] IdentNode: 'studentcou0_.course_id as course_i1_2_, studentcou0_.student_email as student_2_2_' {alias=c, className=jpa.entitymodels.StudentCourses, tableAlias=studentcou0_}
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[studentcou0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'StudentCourses studentcou0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=StudentCourses,tableAlias=studentcou0_,origin=null,columns={,className=jpa.entitymodels.StudentCourses}}

throwQueryException() : no errors
HQL: Select c from jpa.entitymodels.StudentCourses c
SQL: select studentcou0_.course_id as course_i1_2_, studentcou0_.student_email as student_2_2_ from StudentCourses studentcou0_
throwQueryException() : no errors
Checking named query: Find all students
parse() - HQL: SELECT s FROM jpa.entitymodels.Student s
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'FROM'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[IDENT] Node: 'jpa'
       |     |  |  \-[IDENT] Node: 'entitymodels'
       |     |  \-[IDENT] Node: 'Student'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'SELECT'
          \-[IDENT] Node: 's'

select << begin [level=1, statement=select]
FromClause{level=1} : jpa.entitymodels.Student (s) -> student0_
Resolved : s -> student0_.email
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} student0_.email ) ( FromClause{level=1} Student student0_ ) )
Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Student): [Student]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(jpa.entitymodels.Student)
    |  | originalText: s
    |  \-SqlFragment
    \-FromClause
       \-FromElement

Using FROM fragment [Student student0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Student)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'student0_.email as email1_1_' {alias=s, className=jpa.entitymodels.Student, tableAlias=student0_}
    |  \-[SQL_TOKEN] SqlFragment: 'student0_.name as name2_1_, student0_.password as password3_1_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[s], fromElementByTableAlias=[student0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Student student0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=s,role=null,tableName=Student,tableAlias=student0_,origin=null,columns={,className=jpa.entitymodels.Student}}

throwQueryException() : no errors
HQL: SELECT s FROM jpa.entitymodels.Student s
SQL: select student0_.email as email1_1_, student0_.name as name2_1_, student0_.password as password3_1_ from Student student0_
throwQueryException() : no errors
Checking named query: CoursesByStudent
parse() - HQL: SELECT c FROM jpa.entitymodels.StudentCourses c WHERE c.eMail = :email
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'jpa'
    |  |     |  |  \-[IDENT] Node: 'entitymodels'
    |  |     |  \-[IDENT] Node: 'StudentCourses'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'c'
          |  \-[IDENT] Node: 'eMail'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'email'

select << begin [level=1, statement=select]
FromClause{level=1} : jpa.entitymodels.StudentCourses (c) -> studentcou0_
Resolved : c -> studentcou0_.course_id, studentcou0_.student_email
Resolved : c -> (studentcou0_.course_id, studentcou0_.student_email)
getDataType() : eMail -> org.hibernate.type.StringType@5b6ec132
Resolved : c.eMail -> studentcou0_.student_email
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} studentcou0_.course_id, studentcou0_.student_email ) ( FromClause{level=1} StudentCourses studentcou0_ ) ( WHERE ( = ( studentcou0_.student_email (studentcou0_.course_id, studentcou0_.student_email) eMail ) ? ) ) )
Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity StudentCourses): [StudentCourses]
    |  \-IdentNode
    |    persister: SingleTableEntityPersister(jpa.entitymodels.StudentCourses)
    |    originalText: c
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(jpa.entitymodels.StudentCourses)
          | path: c.eMail
          |  +-IdentNode
          |  | persister: SingleTableEntityPersister(jpa.entitymodels.StudentCourses)
          |  | originalText: c
          |  \-IdentNode
          |    persister: null
          |    originalText: eMail
          \-ParameterNode

Using FROM fragment [StudentCourses studentcou0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (StudentCourses)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[ALIAS_REF] IdentNode: 'studentcou0_.course_id as course_i1_2_, studentcou0_.student_email as student_2_2_' {alias=c, className=jpa.entitymodels.StudentCourses, tableAlias=studentcou0_}
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[studentcou0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'StudentCourses studentcou0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=StudentCourses,tableAlias=studentcou0_,origin=null,columns={,className=jpa.entitymodels.StudentCourses}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'studentcou0_.student_email' {propertyName=eMail,dereferenceType=PRIMITIVE,getPropertyPath=eMail,path=c.eMail,tableAlias=studentcou0_,className=jpa.entitymodels.StudentCourses,classAlias=c}
          |  +-[ALIAS_REF] IdentNode: '(studentcou0_.course_id, studentcou0_.student_email)' {alias=c, className=jpa.entitymodels.StudentCourses, tableAlias=studentcou0_}
          |  \-[IDENT] IdentNode: 'eMail' {originalText=eMail}
          \-[NAMED_PARAM] ParameterNode: '?' {name=email, expectedType=org.hibernate.type.StringType@5b6ec132}

throwQueryException() : no errors
HQL: SELECT c FROM jpa.entitymodels.StudentCourses c WHERE c.eMail = :email
SQL: select studentcou0_.course_id as course_i1_2_, studentcou0_.student_email as student_2_2_ from StudentCourses studentcou0_ where studentcou0_.student_email=?
throwQueryException() : no errors
Checking named query: Find course by id
parse() - HQL: SELECT c FROM jpa.entitymodels.Course c WHERE c.cId = :id
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'jpa'
    |  |     |  |  \-[IDENT] Node: 'entitymodels'
    |  |     |  \-[IDENT] Node: 'Course'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'c'
          |  \-[IDENT] Node: 'cId'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'id'

select << begin [level=1, statement=select]
FromClause{level=1} : jpa.entitymodels.Course (c) -> course0_
Resolved : c -> course0_.id
Resolved : c -> course0_.id
getDataType() : cId -> org.hibernate.type.IntegerType@39ac0c0a
Resolved : c.cId -> course0_.id
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} course0_.id ) ( FromClause{level=1} Course course0_ ) ( WHERE ( = ( course0_.id course0_.id cId ) ? ) ) )
Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Course): [Course]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(jpa.entitymodels.Course)
    |  | originalText: c
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(jpa.entitymodels.Course)
          | path: c.cId
          |  +-IdentNode
          |  | persister: SingleTableEntityPersister(jpa.entitymodels.Course)
          |  | originalText: c
          |  \-IdentNode
          |    persister: null
          |    originalText: cId
          \-ParameterNode

Using FROM fragment [Course course0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Course)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'course0_.id as id1_0_' {alias=c, className=jpa.entitymodels.Course, tableAlias=course0_}
    |  \-[SQL_TOKEN] SqlFragment: 'course0_.instructor as instruct2_0_, course0_.name as name3_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[course0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Course course0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=Course,tableAlias=course0_,origin=null,columns={,className=jpa.entitymodels.Course}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'course0_.id' {propertyName=cId,dereferenceType=PRIMITIVE,getPropertyPath=cId,path=c.cId,tableAlias=course0_,className=jpa.entitymodels.Course,classAlias=c}
          |  +-[ALIAS_REF] IdentNode: 'course0_.id' {alias=c, className=jpa.entitymodels.Course, tableAlias=course0_}
          |  \-[IDENT] IdentNode: 'cId' {originalText=cId}
          \-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.IntegerType@39ac0c0a}

throwQueryException() : no errors
HQL: SELECT c FROM jpa.entitymodels.Course c WHERE c.cId = :id
SQL: select course0_.id as id1_0_, course0_.instructor as instruct2_0_, course0_.name as name3_0_ from Course course0_ where course0_.id=?
throwQueryException() : no errors
Checking named query: Find student by email
parse() - HQL: FROM jpa.entitymodels.Student s WHERE s.sEmail = :email
throwQueryException() : no errors
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'jpa'
    |        |  |  \-[IDENT] Node: 'entitymodels'
    |        |  \-[IDENT] Node: 'Student'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'sEmail'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'email'

select << begin [level=1, statement=select]
FromClause{level=1} : jpa.entitymodels.Student (s) -> student0_
Resolved : s -> student0_.email
getDataType() : sEmail -> org.hibernate.type.StringType@5b6ec132
Resolved : s.sEmail -> student0_.email
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} Student student0_ ) ( WHERE ( = ( student0_.email student0_.email sEmail ) ? ) ) )
Derived SELECT clause created.
Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Student): [Student]
    |  +-SelectExpressionImpl
    |  | persister: SingleTableEntityPersister(jpa.entitymodels.Student)
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(jpa.entitymodels.Student)
          | path: s.sEmail
          |  +-IdentNode
          |  | persister: SingleTableEntityPersister(jpa.entitymodels.Student)
          |  | originalText: s
          |  \-IdentNode
          |    persister: null
          |    originalText: sEmail
          \-ParameterNode

Using FROM fragment [Student student0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Student)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'student0_.email as email1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=s,role=null,tableName=Student,tableAlias=student0_,origin=null,columns={,className=jpa.entitymodels.Student}}}
    |  \-[SQL_TOKEN] SqlFragment: 'student0_.name as name2_1_, student0_.password as password3_1_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[s], fromElementByTableAlias=[student0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Student student0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=s,role=null,tableName=Student,tableAlias=student0_,origin=null,columns={,className=jpa.entitymodels.Student}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'student0_.email' {propertyName=sEmail,dereferenceType=PRIMITIVE,getPropertyPath=sEmail,path=s.sEmail,tableAlias=student0_,className=jpa.entitymodels.Student,classAlias=s}
          |  +-[ALIAS_REF] IdentNode: 'student0_.email' {alias=s, className=jpa.entitymodels.Student, tableAlias=student0_}
          |  \-[IDENT] IdentNode: 'sEmail' {originalText=sEmail}
          \-[NAMED_PARAM] ParameterNode: '?' {name=email, expectedType=org.hibernate.type.StringType@5b6ec132}

throwQueryException() : no errors
HQL: FROM jpa.entitymodels.Student s WHERE s.sEmail = :email
SQL: select student0_.email as email1_1_, student0_.name as name2_1_, student0_.password as password3_1_ from Student student0_ where student0_.email=?
throwQueryException() : no errors
Checking 0 named SQL queries
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@2d38edfd
Registering SessionFactory: 57b9177f-84b9-459f-9d25-3b168ab7f1ab (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
begin

    select
        student0_.email as email1_1_,
        student0_.name as name2_1_,
        student0_.password as password3_1_ 
    from
        Student student0_ 
    where
        student0_.email=?
Result set row: 0
Result row: EntityKey[jpa.entitymodels.Student#email1]
Resolving attributes for [jpa.entitymodels.Student#email1]
Processing attribute `sCourses` : value = NOT NULL COLLECTION
Attribute (`sCourses`)  - enhanced for lazy-loading? - false
Processing attribute `sName` : value = name
Attribute (`sName`)  - enhanced for lazy-loading? - false
Processing attribute `sPass` : value = 1
Attribute (`sPass`)  - enhanced for lazy-loading? - false
Done materializing entity [jpa.entitymodels.Student#email1]
Processing flush-time cascades
Dirty checking collections
Collection found: [jpa.entitymodels.Student.sCourses#email1], was: [jpa.entitymodels.Student.sCourses#email1] (uninitialized)
Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
Listing entities:
jpa.entitymodels.Student{sEmail=email1, sName=name, sCourses=<uninitialized>, sPass=1}

    select
        student0_.email as email1_1_,
        student0_.name as name2_1_,
        student0_.password as password3_1_ 
    from
        Student student0_ 
    where
        student0_.email=?
Result set row: 0
Result row: EntityKey[jpa.entitymodels.Student#email1]
committing
Processing flush-time cascades
Dirty checking collections
Collection found: [jpa.entitymodels.Student.sCourses#email1], was: [jpa.entitymodels.Student.sCourses#email1] (uninitialized)
Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
Listing entities:
jpa.entitymodels.Student{sEmail=email1, sName=name, sCourses=<uninitialized>, sPass=1}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
begin

    select
        studentcou0_.course_id as course_i1_2_,
        studentcou0_.student_email as student_2_2_ 
    from
        StudentCourses studentcou0_ 
    where
        studentcou0_.student_email=?
Result set row: 0
Result row: EntityKey[jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=3, eMail=email1}]
Result set row: 1
Result row: EntityKey[jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=4, eMail=email1}]
Result set row: 2
Result row: EntityKey[jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=8, eMail=email1}]
Resolving attributes for [jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=3, eMail=email1}]
Processing attribute `_identifierMapper` : value = [Ljava.lang.Object;@2b38b1f
Attribute (`_identifierMapper`)  - enhanced for lazy-loading? - false
Done materializing entity [jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=3, eMail=email1}]
Resolving attributes for [jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=4, eMail=email1}]
Processing attribute `_identifierMapper` : value = [Ljava.lang.Object;@1d50a7ca
Attribute (`_identifierMapper`)  - enhanced for lazy-loading? - false
Done materializing entity [jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=4, eMail=email1}]
Resolving attributes for [jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=8, eMail=email1}]
Processing attribute `_identifierMapper` : value = [Ljava.lang.Object;@51ab1ee3
Attribute (`_identifierMapper`)  - enhanced for lazy-loading? - false
Done materializing entity [jpa.entitymodels.StudentCourses#component[courseID,eMail]{courseID=8, eMail=email1}]
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
jpa.entitymodels.StudentCourses{}
jpa.entitymodels.StudentCourses{}
jpa.entitymodels.StudentCourses{}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
begin

    select
        course0_.id as id1_0_0_,
        course0_.instructor as instruct2_0_0_,
        course0_.name as name3_0_0_ 
    from
        Course course0_ 
    where
        course0_.id=?
On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
Resolving attributes for [jpa.entitymodels.Course#3]
Processing attribute `cInstructorName` : value = Reynolds Pastor
Attribute (`cInstructorName`)  - enhanced for lazy-loading? - false
Processing attribute `cName` : value = Anatomy
Attribute (`cName`)  - enhanced for lazy-loading? - false
Done materializing entity [jpa.entitymodels.Course#3]
Done entity load : jpa.entitymodels.Course#3
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
jpa.entitymodels.Course{cInstructorName=Reynolds Pastor, cName=Anatomy, cId=3}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
begin

    select
        course0_.id as id1_0_0_,
        course0_.instructor as instruct2_0_0_,
        course0_.name as name3_0_0_ 
    from
        Course course0_ 
    where
        course0_.id=?
On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
Resolving attributes for [jpa.entitymodels.Course#4]
Processing attribute `cInstructorName` : value = Odessa Belcher
Attribute (`cInstructorName`)  - enhanced for lazy-loading? - false
Processing attribute `cName` : value = Organic Chemistry
Attribute (`cName`)  - enhanced for lazy-loading? - false
Done materializing entity [jpa.entitymodels.Course#4]
Done entity load : jpa.entitymodels.Course#4
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
jpa.entitymodels.Course{cInstructorName=Odessa Belcher, cName=Organic Chemistry, cId=4}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
begin

    select
        course0_.id as id1_0_0_,
        course0_.instructor as instruct2_0_0_,
        course0_.name as name3_0_0_ 
    from
        Course course0_ 
    where
        course0_.id=?
On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
Resolving attributes for [jpa.entitymodels.Course#8]
Processing attribute `cInstructorName` : value = Carolan Stoller
Attribute (`cInstructorName`)  - enhanced for lazy-loading? - false
Processing attribute `cName` : value = Data Structures
Attribute (`cName`)  - enhanced for lazy-loading? - false
Done materializing entity [jpa.entitymodels.Course#8]
Done entity load : jpa.entitymodels.Course#8
committing
Processing flush-time cascades
Dirty checking collections
Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
Listing entities:
jpa.entitymodels.Course{cInstructorName=Carolan Stoller, cName=Data Structures, cId=8}
Initiating JDBC connection release from afterTransaction
Initiating JDBC connection release from afterTransaction
